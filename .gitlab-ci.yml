stages:
  - build
  - test
  - sast
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  BACKEND_IMAGE: $CI_REGISTRY_IMAGE/backend
  FRONTEND_IMAGE: $CI_REGISTRY_IMAGE/frontend
  POSTGRES_USER: user
  POSTGRES_PASSWORD: password
  POSTGRES_DB: mydb
  SQLALCHEMY_DATABASE_URI: postgresql+psycopg2://$POSTGRES_USER:$POSTGRES_PASSWORD@$POSTGRES_HOST:5432/$POSTGRES_DB

default:
  tags:
    - multi-service

# ----------- BUILD JOBS -----------
build_backend:
  stage: build
  image: docker:27.3.1
  services:
    - docker:27.3.1-dind
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - docker build --no-cache --progress=plain -t $BACKEND_IMAGE:$CI_COMMIT_REF_SLUG backend/
    - docker build -t $BACKEND_IMAGE:latest backend/
    - docker push $BACKEND_IMAGE:$CI_COMMIT_REF_SLUG
    - docker push $BACKEND_IMAGE:latest
  rules:
    - changes:
        - backend/**/*
      if: '$CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "merge_request_event"'

build_frontend:
  stage: build
  image: docker:27.3.1
  services:
    - docker:27.3.1-dind
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - docker build --no-cache --progress=plain -t $FRONTEND_IMAGE:$CI_COMMIT_REF_SLUG frontend/
    - docker build -t $FRONTEND_IMAGE:latest frontend/
    - docker push $FRONTEND_IMAGE:$CI_COMMIT_REF_SLUG
    - docker push $FRONTEND_IMAGE:latest
  rules:
    - changes:
        - frontend/**/*
      if: '$CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "merge_request_event"'

# ----------- TEST JOBS -----------
test_backend:
  stage: test
  image: $BACKEND_IMAGE:latest
  services:
    - name: postgres:latest
      alias: postgres
  variables:
    POSTGRES_HOST: postgres
  script:
    - apt-get update && apt-get install -y postgresql-client
    - until pg_isready -h $POSTGRES_HOST -U $POSTGRES_USER -d $POSTGRES_DB; do sleep 1; done
    - pytest backend/tests/
  rules:
    - changes:
        - backend/**/*
        - database/**/*
      if: '$CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "merge_request_event"'

test_frontend:
  stage: test
  image: $FRONTEND_IMAGE:$CI_COMMIT_REF_SLUG
  variables:
    NEXT_PUBLIC_BACKEND_URL: http://mock-backend
  script:
    - cd frontend/
    - npm install
    - npm test
  rules:
    - changes:
        - frontend/**/*
      if: '$CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "merge_request_event"'

# ----------- SAST JOB -----------
sast:
  stage: sast
  image: registry.gitlab.com/security-products/semgrep:5
  script:
    - /analyzer run
    - if grep -q '"severity":' gl-sast-report.json; then echo "Vulnerabilities detected!"; exit 1; fi
  artifacts:
    reports:
      sast: gl-sast-report.json
    paths:
      - gl-sast-report.json
    when: always
  variables:
    SAST_SEVERITY_LEVEL: "low"
    SAST_CONFIDENCE_LEVEL: "low"
  rules:
    - changes:
        - backend/**/*
        - frontend/**/*
        - database/**/*
    - if: '$CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "merge_request_event"'

# ----------- DEPLOY JOBS -----------
pages:
  stage: deploy
  image: python:3.12-slim
  before_script:
    - pip install --no-cache-dir mkdocs mkdocs-material
  script:
    - mkdocs build
    - mv site public
  artifacts:
    paths:
      - public
    expire_in: 1 week
  rules:
    - changes:
        - docs/**
    - if: '$CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "merge_request_event"'

deploy:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client rsync
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan -H $VM_IP >> ~/.ssh/known_hosts
  script:
    - VM_USER=$VM_USER VM_IP=$VM_IP ./deploy.sh
  only:
    - main
    - feat/17-vm-deployment
